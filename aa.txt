Here's a single Rust file containing all the questions and their implementations:

```rust
#[derive(Debug, Clone)]
struct TreeNode {
    val: i32,
    left: Option<Box<TreeNode>>,
    right: Option<Box<TreeNode>>,
}

// Question: Implement a function that checks whether a given string is a palindrome or not.
fn is_palindrome(s: &str) -> bool {
    s.chars().eq(s.chars().rev())
}

// Question: Given a sorted array of integers, implement a function that returns the index of the first occurrence of a given number.
fn find_first_occurrence(arr: &[i32], target: i32) -> Option<usize> {
    arr.iter().position(|&x| x == target)
}

// Question: Given a string of words, implement a function that returns the shortest word in the string.
fn shortest_word(s: &str) -> &str {
    s.split_whitespace().min_by_key(|&word| word.len()).unwrap_or("")
}

// Question: Implement a function that checks whether a given number is prime or not.
fn is_prime(n: u64) -> bool {
    if n <= 1 {
        return false;
    }
    for i in 2..=(n as f64).sqrt() as u64 {
        if n % i == 0 {
            return false;
        }
    }
    true
}

// Question: Given a sorted array of integers, implement a function that returns the median of the array.
fn median(arr: &[i32]) -> f64 {
    let len = arr.len();
    if len % 2 == 0 {
        let mid = len / 2;
        (arr[mid - 1] + arr[mid]) as f64 / 2.0
    } else {
        arr[len / 2] as f64
    }
}

// Question: Implement a function that finds the longest common prefix of a given set of strings.
fn longest_common_prefix(strings: &[&str]) -> String {
    if strings.is_empty() {
        return String::new();
    }
    let first_string = strings[0];
    let mut prefix = String::new();
    'outer: for (i, c) in first_string.chars().enumerate() {
        for string in &strings[1..] {
            if let Some(sc) = string.chars().nth(i) {
                if sc != c {
                    break 'outer;
                }
            } else {
                break 'outer;
            }
        }
        prefix.push(c);
    }
    prefix
}

// Question: Implement a function that returns the kth smallest element in a given array.
fn kth_smallest(arr: &[i32], k: usize) -> Option<i32> {
    let mut sorted_arr = arr.to_vec();
    sorted_arr.sort();
    sorted_arr.get(k - 1).cloned()
}

// Question: Given a binary tree, implement a function that returns the maximum depth of the tree.
fn max_depth(root: Option<&Box<TreeNode>>) -> i32 {
    match root {
        Some(node) => {
            let left_depth = max_depth(node.left.as_ref());
            let right_depth = max_depth(node.right.as_ref());
            1 + left_depth.max(right_depth)
        }
        None => 0,
    }
}

// Reverse a string in Rust
fn reverse_string(s: &str) -> String {
    s.chars().rev().collect()
}

// Check if a number is prime in Rust
fn is_prime_rust(n: u64) -> bool {
    if n <= 1 {
        return false;
    }
    for i in 2..=(n as f64).sqrt() as u64 {
        if n % i == 0 {
            return false;
        }
    }
    true
}

// Merge two sorted arrays in Rust
fn merge_sorted_arrays(arr1: &[i32], arr2: &[i32]) -> Vec<i32> {
    let mut result = Vec::with_capacity(arr1.len() + arr2.len());
    let (mut i, mut j) = (0, 0);
    while i < arr1.len() && j < arr2.len() {
        if arr1[i] < arr2[j] {
            result.push(arr1[i]);
            i += 1;
        } else {
            result.push(arr2[j]);
            j += 1;
        }
    }
    result.extend_from_slice(&arr1[i..]);
    result.extend_from_slice(&arr2[j..]);
    result
}

// Find the maximum subarray sum in Rust
fn max_subarray_sum(arr: &[i32]) -> i32 {
    let mut max_sum = arr[0];
    let mut current_sum = arr[0];
    for &num in arr.iter().skip(1) {
        current_sum = current_sum.max(num);
        max_sum = max_sum.max(current_sum);
    }
    max_sum
}

fn main() {
    // Testing each function
    let test_string = "racecar";
    if is_palindrome(test_string) {
        println!("{} is a palindrome", test_string);
    } else {
        println!("{} is not a palindrome", test_string);
    }

    let sorted_array = vec![1, 2, 3, 4, 5, 6, 7];
    let target = 5;
    match find_first_occurrence(&sorted_array, target) {
        Some(index) => println!("First occurrence of {} is at index {}", target, index),
        None => println!("{} not found in the array", target),
    }

    let test_string = "The quick brown fox jumps over the lazy dog";
    println!("Shortest word: {}", shortest_word(test_string));

    let num = 17;
    if is_prime(num) {
        println!("{} is prime", num);
    } else {
        println!("{} is not prime", num);
    }

    println!("Median: {}", median(&sorted_array));

    let strings = vec!["flower", "flow", "flight"];
    println!("Longest common prefix: {}", longest_common_prefix(&strings));

    let arr = vec![7, 10, 4, 3, 20, 15];
    let k = 3;
    match kth_smallest(&arr, k) {
        Some(val) => println!("{}th smallest element is {}", k, val),
        None => println!("Array is empty or k is out of bounds"),
    }

    let root = Some(Box::new(TreeNode {
        val: 3,
        left: Some(Box::new(TreeNode {
            val: 9,
            left: None,
            right: None,
        })),
        right: Some(Box::new(TreeNode {
            val: 20,
            left: Some(Box::new(TreeNode {
                val: 15,
                left: None,
                right: None,
            })),
            right: Some(Box::new(TreeNode {
                val: 7,
                left: None,
                right: None,
            })),
        })),
    }));
    println!("Max depth of the binary tree: {}", max_depth(root.as_ref()));

    let test_string = "hello";
    println!("Reversed string: {}", reverse_string(test_string));

    let arr1 = vec![1, 3, 5, 7, 9];
    let arr2 = vec![2, 4, 6
